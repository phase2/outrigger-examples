#!/usr/bin/env bash
##
# Doctor
#
# Evaluate the state of the project setup and report on problems.
##

CALLPATH=`dirname $0`
source "$CALLPATH/framework.sh"

STATUS=0

SUCCESS='echoInfo'
WARNING='echoWarn'
ERROR='echoError'

# Flag the status of a particular check.
# $1 - Status/Output Function
# $2 - Category
# $3 - Message
flag() {
  if [ "$1" == "$ERROR" ]; then
    STATUS=1
  fi
  echo -en "\t"
  $1 "$2 $3\n"
}

# Assert a command is available.
# $1 - The command
# $2 - Severity on failure.
assertCmd() {
  if [ -z $(which $1) ]; then
    flag $2 $1 'command not found.'
  else
    flag $SUCCESS $1 'found'
  fi
}

# Assert presence of a file.
# $1 - Path to File
# $2 - Severity on failure
assertFile() {
  if [ -f "$1" ]; then
    flag $SUCCESS $1 'found'
  else
    flag $2 $1 'file not found.'
  fi
}

# Assert presence of a directory.
# $1 - Path to directory
# $2 - Severity on failure
assertDir() {
  if [ -d "$1" ]; then
    flag $SUCCESS $1 'found'
  else
    flag $2 $1 'directory not found.'
  fi
}

# Assert a value is truthy.
# $1 - Value, typically the output of a command.
# $2 - Severity on failure
assertOk() {
  if [ -z "$1" ]; then
    flag $3 $2 "not running"
  else
    flag $SUCCESS $2 "running"
  fi
}

# Assert two values are equivalent.
# $1 - Value 1
# $2 - Value 2
# $3 - Severity on failure
assertEqual() {
  if [ "$1" == "$2" ]; then
    flag $3 "$1 and $2" "not equal"
  else
    flag $SUCCESS "$1" "confirmed"
  fi
}

# Assert two values are not equivalent.
# $1 - Value 1
# $2 - Value 2
# $3 - Severity on failure
assertNotEqual() {
  if [ "$1" != "$2" ]; then
    flag $SUCCESS $1 "confirmed"
  else
    flag $3 "$1 and $2" "equal and should not be"
  fi
}

if [ -z "$1" ] || [ "$1" == 'outrigger' ]; then
  heading 'Docker Utilities'
  assertCmd 'rig' $WARNING
  assertCmd 'docker' $ERROR
  assertCmd 'docker-compose' $ERROR
  assertCmd 'docker-machine' $ERROR
  assertNotEqual $(docker-machine active) 'No active host found' $WARNING
fi

if [ -z "$1" ] || [ "$1" == 'generator' ]; then
  heading 'Code Generated with Yo Outrigger Drupal'
  assertDir 'src' $ERROR
  assertFile 'package.json' $ERROR
  assertFile 'composer.json' $ERROR
  assertFile 'docker-compose.yml' $ERROR
  assertFile 'build.yml' $ERROR
fi

if [ -z "$1" ] || [ "$1" == 'requirements' ]; then
  heading 'Project Requirements Met'
  assertDir 'node_modules' $ERROR
fi

if [ -z "$1" ] || [ "$1" == 'gdt' ]; then
  heading 'Code Generated by Grunt Drupal Tasks Build Process'
  assertDir 'build' $ERROR
  assertDir 'build/html' $ERROR
  assertFile 'build/html/index.php' $ERROR
fi

if [ -z "$1" ] || [ "$1" == 'unison' ]; then
  heading 'Unison File Sync Functionality'
  docker-compose -f build.yml run base ls /var/www/src > /dev/null 2>&1
  assertOk $? 'unison file sync/volume bind mount' $ERROR
fi

if [ "$STATUS" -gt 0 ]; then
  echo 'Run "rig doctor" to address general Docker problems.'
fi

exit $STATUS
